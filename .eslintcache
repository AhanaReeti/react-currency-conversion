[{"C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\index.js":"1","C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\App.js":"2","C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\reportWebVitals.js":"3","C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\components\\conversion\\converter.js":"4","C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\components\\chart\\chart.jsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":424,"mtime":1612489858116,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":3445,"mtime":1612738455163,"results":"10","hashOfConfig":"7"},{"size":6015,"mtime":1612782010901,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"xsl4n4",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\index.js",[],["25","26"],"C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\App.js",[],"C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\reportWebVitals.js",[],"C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\components\\conversion\\converter.js",["27","28","29"],"import React, {useState, useEffect } from \"react\";\r\nimport CurrencyLayerClient from \"currencylayer-client\"\r\nimport converter from \"./converter.css\";\r\n\r\nclass Converter extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      result: null,\r\n      baseCurrency: \"EUR\",\r\n      targetCurrency: \"CHF\",\r\n      amount: 1,\r\n      targetCurrencies: [],\r\n      baseCurrencies: []\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    // Source and target currency hard coded as we have only 3 currency to consider\r\n    // Otherwise we can have list of values and filter based on our requirement\r\n\r\n    const targetCurrency = [];\r\n    targetCurrency.push(\"USD\");\r\n    targetCurrency.push(\"CHF\");\r\n\r\n    const baseCurrency = [];\r\n    baseCurrency.push(\"EUR\");\r\n\r\n    this.setState({ targetCurrencies: targetCurrency });\r\n    this.setState({ baseCurrencies: baseCurrency });\r\n  }\r\n\r\n  convertHandler = () => {\r\n    if (!isNaN(this.state.amount)) {\r\n    // Initialize CurrencyLayerClient with access key\r\n    let client = new CurrencyLayerClient({ apiKey: process.env.REACT_APP_API_KEY })\r\n\r\n    // Invocation of the live end point of CurrencyLayer API\r\n    client.live()\r\n      .then(liveResponse => {\r\n\r\n        let rate = null;\r\n\r\n        if (this.state.targetCurrency !== \"CHF\") {\r\n          // when target currency is USD, we have to devide 1 by USDEUR from response\r\n          rate = (1 / liveResponse.quotes.USDEUR);\r\n        }\r\n        else {\r\n          // when target currency is CHF, first we have to devide USDEUR by USDCHF.  \r\n          // Then we have to devide 1 by the result\r\n          rate = (liveResponse.quotes.USDCHF / liveResponse.quotes.USDEUR);\r\n        }\r\n\r\n        const result = this.state.amount * rate;\r\n        this.setState({ result: result.toFixed(6) });\r\n      })\r\n      .catch((error => {\r\n        console.error(error);\r\n      }));\r\n\r\n    }\r\n    else {\r\n      this.setState({ result: \"Only number can be converted!\" });\r\n    }\r\n  };\r\n\r\n  selectHandler = event => {\r\n    if (event.target.name === \"base\") {\r\n      this.setState({ baseCurrency: event.target.value });\r\n    } else {\r\n      if (event.target.name === \"target\") {\r\n        this.setState({ targetCurrency: event.target.value });\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Converter\">\r\n        <h2>\r\n          <span>Currency Converter </span>\r\n        </h2>\r\n        <div className=\"From\">\r\n          <input\r\n            name=\"amount\"\r\n            type=\"text\"\r\n            value={this.state.amount}\r\n            onChange={event => this.setState({ amount: event.target.value })}\r\n          />\r\n          <select\r\n            name=\"base\"\r\n            onChange={event => this.selectHandler(event)}\r\n            value={this.state.baseCurrency}\r\n          >\r\n            {this.state.baseCurrencies.map(cur => (\r\n              <option key={cur}>{cur}</option>\r\n            ))}\r\n          </select>\r\n          <select\r\n            name=\"target\"\r\n            onChange={event => this.selectHandler(event)}\r\n            value={this.state.targetCurrency}\r\n          >\r\n            {this.state.targetCurrencies.map(cur => (\r\n              <option key={cur}>{cur}</option>\r\n            ))}\r\n          </select>\r\n          <button onClick={this.convertHandler}>Convert</button>\r\n          {this.state.result && <h3>{this.state.result}</h3>}\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Converter;","C:\\Users\\DASUTT\\Documents\\my_doc\\ahana\\reactGraph\\graph-project\\src\\components\\chart\\chart.jsx",["30"],"import React from 'react';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport { Line } from 'react-chartjs-2';\r\nimport Moment from 'react-moment';\r\nimport moment from 'moment';\r\nimport CurrencyLayerClient from \"currencylayer-client\";\r\nimport './chart.scss';\r\n\r\nconst colors = ['lightgreen', 'pink'];\r\n\r\nconst dataSetOpts = {\r\n    fill: false,\r\n    lineTension: 0.1,\r\n    backgroundColor: 'rgba(75,192,192,0.4)',\r\n    borderCapStyle: 'butt',\r\n    borderDash: [],\r\n    borderDashOffset: 0.0,\r\n    borderJoinStyle: 'miter',\r\n    pointBackgroundColor: '#fff',\r\n    pointBorderWidth: 1,\r\n    pointHoverRadius: 5,\r\n    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\r\n    pointHoverBorderColor: 'rgba(220,220,220,1)',\r\n    pointHoverBorderWidth: 2,\r\n    pointRadius: 1,\r\n    pointHitRadius: 10,\r\n    responsive: true\r\n}\r\n\r\nclass Chart extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        const baseCurrencies = [\"EUR\"];\r\n        this.state = {\r\n            baseCurrencies: baseCurrencies,\r\n            selectedBaseCurrency: baseCurrencies[0],\r\n            targetCurrencies: [],\r\n            selectedTargetCurrencies: new Map(),\r\n            conversionRates: {},\r\n            chartData: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.retrieveHistoricalConversionRates();\r\n    }\r\n\r\n    selectBaseCurrency(ccy) {\r\n        this.setState({\r\n            selectedBaseCurrency: ccy,\r\n            selectedTargetCurrencies: new Map(),\r\n            chartData: {}\r\n        }, () => this.retrieveHistoricalConversionRates());\r\n    }\r\n\r\n    selectTargetCurrency(targetCurrency) {\r\n\r\n        this.setState(prevState => {\r\n            let targetCurrencies = new Map(prevState.selectedTargetCurrencies);\r\n            (targetCurrencies.has(targetCurrency)) ? targetCurrencies.delete(targetCurrency) : targetCurrencies.set(targetCurrency, 1);\r\n            const chart = this.getDataSets(\r\n                this.state.conversionRates\r\n                , this.state.selectedBaseCurrency\r\n                , [...targetCurrencies.keys()])\r\n            return {\r\n                selectedTargetCurrencies: targetCurrencies,\r\n                chartData: chart\r\n            };\r\n        });\r\n    }\r\n\r\n    getDataSets(rates, baseCurrency, targetCurrencies) {\r\n        return {\r\n            labels: rates.data.ratesByBaseCurrency[0].timeseries.map(t => \"\" + moment(t.date).format(\"MMM DD\")),\r\n            datasets: targetCurrencies.map((targetCurrency) => {\r\n                const dIndex = rates.data.ratesByBaseCurrency.findIndex(d => d.targetCurrency === targetCurrency);\r\n                return {\r\n                    ...dataSetOpts,\r\n                    label: baseCurrency + ' / ' + targetCurrency,\r\n                    borderColor: colors[dIndex],\r\n                    pointBorderColor: colors[dIndex],\r\n                    data: rates.data.ratesByBaseCurrency[dIndex].timeseries.map(t => t.rate)\r\n                };\r\n            }\r\n            )\r\n        };\r\n    }\r\n\r\n  async retrieveHistoricalConversionRates() {\r\n\r\n        let client = new CurrencyLayerClient({ apiKey: process.env.REACT_APP_API_KEY })\r\n\r\n        let historyDuration = 14\r\n\r\n        const currentMoment = moment().subtract(historyDuration, 'days');\r\n        const endMoment = moment().add(0, 'days');\r\n\r\n        let usdRates = [];\r\n        let chfRates = [];\r\n\r\n        while (currentMoment.isBefore(endMoment, 'day')) {\r\n            let date = currentMoment.format('YYYY-MM-DD');\r\n\r\n          await client.historical({ date: date, currencies: 'EUR,CHF' })\r\n                .then(historicalResponse => {\r\n\r\n                    let rate = 1 / historicalResponse.quotes.USDEUR;\r\n                    usdRates.push({ date, rate });\r\n\r\n                    rate = historicalResponse.quotes.USDCHF / historicalResponse.quotes.USDEUR;\r\n                    chfRates.push({ date, rate });\r\n                })\r\n                .catch((error => {\r\n                    console.error(error);\r\n                }));\r\n\r\n            currentMoment.add(1, 'days');\r\n        }\r\n\r\n        this.setState({\r\n            targetCurrencies: [\"USD\", \"CHF\"],\r\n            conversionRates: {\r\n                data: {\r\n                    ratesByBaseCurrency: [{ targetCurrency: \"USD\", timeseries: usdRates },\r\n                    { targetCurrency: \"CHF\", timeseries: chfRates }]\r\n                }\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    render() {\r\n        return <div className='rate-data'>\r\n            <div className='rate-selector'>\r\n                <h4>Source currency</h4>\r\n                <div>\r\n                    {this.state.baseCurrencies\r\n                        .map(currency => {\r\n                            let opts = {\r\n                                key: currency,\r\n                                label: currency,\r\n                                color: (currency === this.state.selectedBaseCurrency) ? 'primary' : 'default'\r\n                            }\r\n                            return <Chip {...opts} onClick={() => this.selectBaseCurrency(currency)} />;\r\n                        })}\r\n                </div>\r\n\r\n                <h4>Target currency</h4>\r\n\r\n                <div>\r\n                    {this.state.targetCurrencies\r\n                        .map((targetCurrency, index) => {\r\n                            let opts = {\r\n                                key: targetCurrency,\r\n                                label: targetCurrency,\r\n                                color: 'default',\r\n                                style: (this.state.selectedTargetCurrencies.has(targetCurrency)) ? { backgroundColor: colors[index] } : {},\r\n                            }\r\n                            return <Chip {...opts} onClick={() => this.selectTargetCurrency(targetCurrency)} />;\r\n                        })}\r\n                </div>\r\n            </div>\r\n            <div className='chart'>\r\n                <Line height={100} data={this.state.chartData} />\r\n            </div>\r\n        </div>\r\n\r\n    }\r\n}\r\n\r\nexport default Chart;",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":1,"column":16,"nodeType":"37","messageId":"38","endLine":1,"endColumn":24},{"ruleId":"35","severity":1,"message":"39","line":1,"column":26,"nodeType":"37","messageId":"38","endLine":1,"endColumn":35},{"ruleId":"35","severity":1,"message":"40","line":3,"column":8,"nodeType":"37","messageId":"38","endLine":3,"endColumn":17},{"ruleId":"35","severity":1,"message":"41","line":4,"column":8,"nodeType":"37","messageId":"38","endLine":4,"endColumn":14},"no-native-reassign",["42"],"no-negated-in-lhs",["43"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'converter' is defined but never used.","'Moment' is defined but never used.","no-global-assign","no-unsafe-negation"]